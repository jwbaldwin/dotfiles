# ~/dotfiles/ansible/playbook.yml
---
- name: Setup Local Workstation
  hosts: localhost
  connection: local
  become: no # Default become state is 'no'

  vars:
    home_dir: "{{ ansible_env.HOME }}"
    brew_prefix: "{{ '/opt/homebrew' if ansible_architecture == 'arm64' else '/usr/local' }}"
    asdf_data_dir: "{{ ansible_env.ASDF_DATA_DIR | default(home_dir ~ '/.asdf', true) }}"
    neovim_version: "latest" # Specify desired Neovim version

    # List of GUI apps to remind the user about
    manual_gui_apps:
      - 1Password
      - Ghostty
      - Raycast
      - TablePlus

  tasks:
    - name: Print initial confirmation message
      ansible.builtin.debug:
        msg: "Ansible setup initiated for host {{ inventory_hostname }}..."
      tags: [always]

    # --------------------------------------------------------------------------
    # Prerequisites & System Setup (Homebrew, Updates)
    # --------------------------------------------------------------------------
    - name: Ensure Homebrew is installed and updated
      block:
        - name: Check if Homebrew is installed (run bootstrap if not)
          ansible.builtin.stat:
            path: "{{ brew_prefix }}/bin/brew"
          register: brew_stat
          failed_when: not brew_stat.stat.exists
          ignore_errors: yes

        - name: Fail if Homebrew is not installed
          ansible.builtin.fail:
            msg: "Homebrew binary not found. Please run './bootstrap.sh' first."
          when: not brew_stat.stat.exists

        - name: Update Homebrew recipes
          ansible.builtin.command: "{{ brew_prefix }}/bin/brew update"
          register: brew_update
          changed_when: "'Already up-to-date.' not in brew_update.stdout"
          tags: [brew, prereq]
      tags: [always] # Always run this block

    # --------------------------------------------------------------------------
    # Install Core CLI Tools via Homebrew
    # --------------------------------------------------------------------------
    - name: Install Homebrew CLI formulae
      community.general.homebrew:
        name:
          - asdf
          - tmux
          - chafa
          - git-delta
          - btop
          - sqlite
          - zoxide
          - jq
          - ripgrep
          - aeorspace
        state: present
      tags: [brew, core, cli]

    # --------------------------------------------------------------------------
    # Install Neovim via ASDF
    # --------------------------------------------------------------------------
    - name: Install Neovim using asdf
      block:
        - name: Add asdf neovim plugin
          ansible.builtin.shell: >
            bash -c "source {{ brew_prefix }}/opt/asdf/libexec/asdf.sh && \
            asdf plugin add neovim || echo 'Plugin already added'"
          args:
            executable: /bin/bash
          register: asdf_plugin_add
          changed_when: "'already added' not in asdf_plugin_add.stdout"

        - name: Install specified Neovim version with asdf
          ansible.builtin.shell: >
            bash -c "source {{ brew_prefix }}/opt/asdf/libexec/asdf.sh && \
            asdf install neovim {{ neovim_version }}"
          args:
            executable: /bin/bash
            creates: "{{ asdf_data_dir }}/installs/neovim/{{ neovim_version }}/bin/nvim"
          changed_when: true

        - name: Set global Neovim version with asdf
          ansible.builtin.shell: >
            bash -c "source {{ brew_prefix }}/opt/asdf/libexec/asdf.sh && \
            asdf global neovim {{ neovim_version }}"
          args:
            executable: /bin/bash
          register: asdf_global_set
          changed_when: "'global neovim' in asdf_global_set.stdout"
      tags: [asdf, neovim, dev]

    # --------------------------------------------------------------------------
    # Reminder for Manual GUI Application Installation
    # --------------------------------------------------------------------------
    - name: Remind user to install GUI applications manually
      ansible.builtin.debug:
        msg: |
          #############################################################
          # Please manually install the following GUI applications:
          # {{ manual_gui_apps | join('\n# - ') }}
          #############################################################
      tags: [apps, gui, manual_reminder]

    # --------------------------------------------------------------------------
    # Language Runtimes & Dev Tools (Rust)
    # --------------------------------------------------------------------------
    - name: Install Rust via rustup
      block:
        - name: Check if rustc is already installed
          ansible.builtin.command: command -v rustc
          register: rustc_check
          changed_when: false
          failed_when: false

        - name: Download rustup-init script
          ansible.builtin.get_url:
            url: https://sh.rustup.rs
            dest: /tmp/rustup-init.sh
            mode: '0755'
          when: rustc_check.rc != 0

        - name: Run rustup-init script non-interactively
          ansible.builtin.shell: >
            sh /tmp/rustup-init.sh -y --no-modify-path --default-toolchain stable
          args:
            creates: "{{ home_dir }}/.cargo/bin/rustc"
          when: rustc_check.rc != 0
          changed_when: true

        - name: Clean up rustup-init script
          ansible.builtin.file:
            path: /tmp/rustup-init.sh
            state: absent
          when: rustc_check.rc != 0

        - name: Ensure .cargo/bin is in PATH (Example for Zsh)
          ansible.builtin.lineinfile:
            path: "{{ home_dir }}/.zprofile"
            line: 'export PATH="$HOME/.cargo/bin:$PATH"'
            create: yes
            mode: '0644'
            regexp: '^export PATH="\$HOME/\.cargo/bin:\$PATH"'
          when: ansible_env.SHELL is search("zsh")
      tags: [rust, dev, lang]

    # --------------------------------------------------------------------------
    # Filesystem & Configuration
    # --------------------------------------------------------------------------
    - name: Create ~/repos directory
      ansible.builtin.file:
        path: "{{ home_dir }}/repos"
        state: directory
        mode: '0755'
      tags: [config, filesystem]

    # --------------------------------------------------------------------------
    # Final Message
    # --------------------------------------------------------------------------
    - name: Print completion message
      ansible.builtin.debug:
        msg: "Ansible setup playbook completed. Remember to check manual install reminders above!"
      tags: [always]

